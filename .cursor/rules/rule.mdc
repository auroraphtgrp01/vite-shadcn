---
alwaysApply: true
---

# Nailism Booking Project Rules

## 1. Project Overview

**Nailism Booking** là ứng dụng đặt lịch nail salon chuyên nghiệp với hỗ trợ đa ngôn ngữ (tiếng Việt/tiếng Anh).

### Tech Stack
- **Framework**: React 18+ với TypeScript
- **Build Tool**: Vite
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/ui
- **Internationalization**: react-i18next
- **Routing**: React Router v6
- **Icons**: Lucide React (ONLY)

## 2. UI/UX Guidelines

### shadcn/ui Usage
- **ALWAYS** use shadcn/ui components instead of custom components
- **NEVER** create custom UI components that already exist in shadcn/ui
- Import from `@/components/ui/` path
- Follow shadcn/ui design patterns

### Color System (MANDATORY)
**ONLY** use Tailwind CSS color variables from shadcn/ui:

#### Background Colors
- `bg-background`
- `bg-muted`
- `bg-card`

#### Primary Colors
- `bg-primary`
- `text-primary`
- `border-primary`

#### Secondary Colors
- `bg-secondary`
- `text-secondary`

#### Accent Colors
- `bg-accent`
- `text-accent`

#### ⚠️ Color Restrictions
- **PROHIBITED**: Hard-coded colors (`#ffffff`, `rgb(0,0,0)`, etc.)
- **PROHIBITED**: Color gradients (keep design simple)
- **REQUIRED**: Use CSS variables for theme consistency

### Icon Rules
- **ONLY** use Lucide React icons
- Import from `lucide-react`
- Sizes: `w-4 h-4` (inline), `w-6 h-6` (buttons)
- Colors: `text-primary`, `text-muted-foreground`

### Design Principles
- **Elegant**: Clean interface, no excessive effects
- **Creative**: Unique combinations while maintaining consistency
- **Balanced**: Harmonious spacing with Tailwind values (`p-4`, `m-2`, `gap-4`)
- **Simple**: Minimalism, remove unnecessary elements

## 3. Internationalization (i18n) Rules

### Translation Structure
```json
{
  "navbar": {
    "home": "Trang chủ",
    "services": "Dịch vụ"
  },
  "homepage": {
    "hero": {
      "title": "Làm đẹp móng tay",
      "description": "..."
    }
  }
}
```

### i18n Implementation
- **ALWAYS** use `useTranslation()` hook for text content
- **NEVER** hard-code text strings in components
- Use nested keys: `homepage.hero.title`
- Provide translations for both `vi` and `en`
- Use semantic key names (not generic like `text1`)

### Language Switching
- Use `useLanguage()` hook for language management
- Implement smooth transitions with CSS classes
- Show loading state during language changes
- Prevent layout shift with `prevent-layout-shift` class

## 4. Code Standards

### TypeScript (MANDATORY)
- **REQUIRED**: Use TypeScript for all components
- Define proper interfaces for props and state
- Use strict type checking
- **PROHIBITED**: `any` type usage

### Component Structure
```tsx
import { useTranslation } from 'react-i18next';
import { useLanguage } from '@/hooks/useLanguage';

interface ComponentProps {
  // Define props interface
}

export function Component({ prop1, prop2 }: ComponentProps) {
  const { t } = useTranslation();
  const { isChangingLanguage } = useLanguage();
  
  return (
    <div className="component-class">
      {t('translation.key')}
    </div>
  );
}
```

### File Naming
- **Components**: PascalCase (`HomePage.tsx`, `NavBar.tsx`)
- **Hooks**: camelCase with `use` prefix (`useLanguage.ts`)
- **Utilities**: camelCase (`utils.ts`, `i18n.ts`)

### Import Organization
```tsx
// 1. React imports
import React, { useState, useEffect } from 'react';

// 2. Third-party libraries
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';

// 3. Internal components
import { Navbar } from '@/components/layout/NavBar';
import { useLanguage } from '@/hooks/useLanguage';

// 4. Types and utilities
import { ComponentProps } from '@/types';
import { cn } from '@/lib/utils';
```

## 5. Performance & UX Rules

### Loading States
- **ALWAYS** implement loading states for async operations
- Use `LoadingOverlay` component for language switching
- Show progress indicators
- Implement smooth transitions

### CSS Transitions
- Use custom CSS classes for smooth transitions:
  - `text-transition`: Smooth text transitions
  - `layout-transition`: Layout stability
  - `prevent-layout-shift`: Prevent layout jumps
  - `fade-in`: Smooth content appearance

### Responsive Design
- **Mobile-first** approach
- Breakpoints: Mobile (<768px), Tablet (768-1024px), Desktop (>1024px)
- Test on real devices
- Ensure touch-friendly interactions

## 6. Nailism Business Rules

### Content Guidelines
- **Professional tone**: Friendly but professional
- **Nail-specific terminology**: Use industry terms
- **Clear booking flow**: Intuitive user journey
- **Safety emphasis**: Highlight safety and quality
- **Pricing**: VND for Vietnamese, USD for English

### Features Priority
1. **Booking System**: Core functionality
2. **Service Display**: Nail services showcase
3. **Language Switching**: Seamless vi/en toggle
4. **Responsive Design**: Mobile-first approach
5. **Loading States**: Smooth user experience

## 7. Project Structure

```
src/
├── components/
│   ├── layout/           # Layout components
│   ├── providers/        # Context providers
│   └── ui/              # shadcn/ui components
├── hooks/               # Custom React hooks
├── lib/                 # Utilities and configurations
├── locales/            # Translation files (vi/, en/)
├── pages/              # Page components
├── router/             # Routing configuration
└── types/              # TypeScript definitions
```

## 8. Development Workflow

### Before Starting
1. Check existing shadcn/ui components
2. Plan translation keys structure
3. Consider responsive design
4. Think about loading states

### Code Review Checklist
- [ ] Uses shadcn/ui components
- [ ] Implements i18n properly
- [ ] TypeScript types are correct
- [ ] Responsive design works
- [ ] Loading states are handled
- [ ] No hard-coded colors
- [ ] Uses Lucide icons only
- [ ] Follows naming conventions

## 9. Common Mistakes to Avoid

1. **DON'T** create custom UI components when shadcn/ui exists
2. **DON'T** hard-code text strings
3. **DON'T** use hard-coded colors
4. **DON'T** forget TypeScript types
5. **DON'T** ignore responsive design
6. **DON'T** skip loading states
7. **DON'T** use non-Lucide icons
8. **DON'T** forget i18n implementation

## 10. Language and Commit Rules

### Communication Language
- Use **Vietnamese** for project discussions and documentation
- **Exception**: Commit messages must be in English

### Commit Message Standards
```bash
feat: add language switching functionality
fix: resolve layout shift during i18n transition
chore: update shadcn/ui components
docs: update project rules for i18n
```

---

**Remember**: This is a professional nail salon booking system. Prioritize user experience, accessibility, and smooth interactions. Always test in both Vietnamese and English languages.
